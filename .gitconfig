# ~/.gitconfig

[user]
  name = Tyler Brazier
  email = tyler@tylerbrazier.com

[core]
  editor = vim

[color]
  ui = true

[push]
  # push current branch to upstream tracking branch when no args are given
  default = simple

[merge]
  # merge with upstream tracking branch when no args are given
  defaultToUpstream = true

[diff]
  tool = vimdiff

[alias]
  s = status
  a = add -A
  c = commit
  b = branch

  up = "!git add -A && git commit && git push"

  down = "!git add -A \
    && git stash \
    && git fetch --all \
    && git merge \
    && git stash pop"

  # Usage: git ready [<remote>] <branch>
  # If <remote> isn't given, it defaults to origin
  # If <branch> exists on <remote>, check it out.
  # If it doesn't, create the branch and push it to <remote>.
  ready = "!ready() { \
    if (( $# == 1 )); then \
      remote=origin; \
      branch=$1; \
    elif (( $# == 2 )); then \
      remote=$1; \
      branch=$2; \
    else \
      echo 'Usage: git ready [<remote>] <branch>' >&2; \
      exit 1; \
    fi; \
    git fetch $remote; \
    existing=$(git branch -r | grep \"$remote/$branch\\$\"); \
    if [[ -z $existing ]]; then \
      git checkout -b $branch && git push -u $remote $branch; \
    else \
      git checkout -b $branch $remote/$branch; \
    fi; \
    }; ready"

  # Usage: git out [<remote>] <branch>
  # If <remote> isn't given, it defaults to origin
  # Delete <branch> locally and on <remote>.
  out = "!out() { \
    if (( $# == 1 )); then \
      remote=origin; \
      branch=$1; \
    elif (( $# == 2 )); then \
      remote=$1; \
      branch=$2; \
    else \
      echo 'Usage: git out [<remote>] <branch>' >&2; \
      exit 1; \
    fi; \
    git branch -D $branch; \
    git push $remote --delete $branch; \
    }; out"

