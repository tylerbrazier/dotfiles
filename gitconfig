# ~/.gitconfig

[user]
  name = Tyler Brazier
  email = tyler@tylerbrazier.com

[color]
  ui = true

[core]
  editor = vim

[diff]
  tool = vimdiff

[push]
  # when pushing without specifying a branch, use the name of the current branch
  default = current

[branch]
  # a new branch will always --track its remote
  autosetupmerge = always

[include]
  path = .git-back

[alias]
  a = add -A                       # add everything
  b = branch -a -vv                # be super verbose
  c = commit -v                    # show diff when committing
  ch = checkout
  d = difftool -y -t vimdiff HEAD  # no prompt, use vimdiff tool
  f = fetch -a -p                  # fetch all branches and prune dead ones
  l = log --stat                   # also show changed files
  s = status

  # Usage: git up [args for push]
  # Add everything to the index, commit, and push.
  # Additional arguments given will be passed onto `git push`.
  up = "!up() { git add -A && git commit -v && git push $@; }; up"

  # git down [args for pull]
  # Stash everything (including untracked files), pull, and pop stash.
  # Additional arguments given will be passed onto `git pull`.
  down = "!down() { git stash -u && git pull $@; git stash pop; }; down"

  # Usage: git ready [<remote>] <branch>
  # If <remote> isn't given, it defaults to origin.
  # If <branch> exists on <remote>, check it out.
  # If it doesn't, create the branch and push it to <remote>.
  ready = "!ready() { \
    if [ $# -eq 1 ]; then \
      remote=origin; \
      branch=$1; \
    elif [ $# -eq 2 ]; then \
      remote=$1; \
      branch=$2; \
    else \
      echo 'Usage: git ready [<remote>] <branch>' >&2; \
      exit 1; \
    fi; \
    git fetch $remote; \
    existing=$(git branch -r | grep \"$remote/$branch\\$\"); \
    if [ -z $existing ]; then \
      git checkout -b $branch && git push -u $remote $branch; \
    else \
      git checkout -b $branch $remote/$branch; \
    fi; \
    }; ready"

  # Usage: git out [<remote>] <branch>
  # If <remote> isn't given, it defaults to origin.
  # Delete <branch> locally and on <remote>.
  out = "!out() { \
    if [ $# -eq 1 ]; then \
      remote=origin; \
      branch=$1; \
    elif [ $# -eq 2 ]; then \
      remote=$1; \
      branch=$2; \
    else \
      echo 'Usage: git out [<remote>] <branch>' >&2; \
      exit 1; \
    fi; \
    git branch -D $branch; \
    git push $remote --delete $branch; \
    }; out"

