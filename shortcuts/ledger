#!/bin/bash
# https://github.com/termux/termux-widget
# Add an entry to ledger.csv that has 4 columns:
# Date,Amount,Description,Category
# Categories can be used to group rows.
# Later you can make some fancy awk scripts for the csv to build reports.

csv="$HOME/storage/shared/backup/docs/ledger.csv"
taxes="$HOME/storage/shared/backup/docs/taxes"
docpic="$HOME/.shortcuts/docpic"

valid_date() { [[ "$date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; }
valid_amount() { [[ "$amount" =~ ^[+-][0-9]+(\.[0-9]+)?$ ]]; }
valid_description() { [[ "$description" =~ ^[^,]+$ ]]; }
valid_category() { [[ "$category" =~ ^[a-z0-9]+$ ]]; }
valid_answer() { [[ "$1" =~ ^[yn] ]]; }

[ -f "$csv" ] || { echo "No $csv" >&2; exit 1; }

until valid_date; do
	read -erp "Date: " -i "$(date +%Y-%m-%d)" date
done

until valid_amount; do
	read -erp "Amount: $" -i "-" amount
done

until valid_description; do
	read -erp "Description (no commas): " -i "$description" description
done

existing_categories="$(awk -F, 'NR>1{print $4}' "$csv" \
	| tr ' ' '\n' \
	| sort --ignore-case \
	| uniq --ignore-case \
	| paste -sd' ')"
until valid_category; do
	read -erp "Category ($existing_categories): " -i "$category" category
done

echo "$date,$amount,$description,$category" >> "$csv"

column -ts, "$csv" | sort -n | less -S +G

until valid_answer "$deductible"; do
	read -erp "Tax deductible? " -i 'n' deductible
done
if [ "${deductible:0:1}" == "y" ]; then
	read -eri "echo '$date	$amount	$category	$description' >> $taxes"
	eval "$REPLY"
	less -S +G "$taxes"
	until valid_answer "$receipt"; do
		read -erp "docpic receipt? " -i 'y' receipt
	done
	[[ "${receipt:0:1}" == "y" ]] && bash "$docpic"
fi
